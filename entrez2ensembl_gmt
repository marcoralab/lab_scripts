#!/usr/bin/env Rscript

library(biomaRt)

# Parse command line arguments
args <- commandArgs(trailingOnly = TRUE)

# Check if correct number of arguments provided and get output file path
if (length(args) < 1 || length(args) > 2) {
  stop("Usage: Rscript entrez2ensembl_gmt input_file [output_file]\n")
} else if (!file.exists(args[1])) {
  stop("Error: Input file does not exist\n")
} else if (!grepl("\\.gmt$", args[1])) {
  stop("Error: Input file must have .gmt extension\n")
} else if (length(args) == 2 && grepl("\\.gmt$", args[2])) {
  stop("Error: Output file must have .ensembl.gmt extension\n")
} else if (length(args) == 2 && args[1] == args[2]) {
  stop("Error: Output file must be different from input file\n")
} else if (length(args) == 2) {
  output_file <- args[2]
} else {
  output_file <- gsub("(\\.entrez){0,1}\\.gmt$", ".ensembl.gmt", args[1])
}

# Get input file path
input_file <- args[1]

# Connect to Ensembl using the appropriate dataset
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")

# Function to convert Entrez IDs to Ensembl IDs
convert_entrez_to_ensembl <- function(entrez_ids) {
  entrez_ensembl_map <- 
    getBM(attributes = c("entrezgene_id", "ensembl_gene_id"),
          filters = "entrezgene_id",
          values = entrez_ids,
          mart = ensembl)
  return(entrez_ensembl_map$ensembl_gene_id)
}

# Convert Entrez IDs to Ensembl IDs
convert_gmt_entrez_to_ensembl <- function(gmtline) {
  gmtline_split <- strsplit(gmtline, "\t")[[1]]
  message("Converting GMT line: ", gmtline_split[[1]])
  # Exclude the first two columns (gene set name and description)
  converted <- convert_entrez_to_ensembl(gmtline_split[-c(1, 2)])
  paste(c(gmtline_split[[1]], gmtline_split[[2]], converted), collapse = "\t")
}

ensembl_ids_list <-
  readLines(input_file) |>
  lapply(convert_gmt_entrez_to_ensembl) |>
  unlist() |>
  writeLines(output_file)

message(sprintf("Conversion complete. Output written to %s", output_file))
